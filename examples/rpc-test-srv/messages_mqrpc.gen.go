// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messages.proto

/*
	Package main is a generated protocol buffer package.

	It is generated from these files:
		messages.proto

	It has these top-level messages:
		Empty
		ResourceID
		ServerStatus
		Device
		User
		Account
*/
package main

import fmt "fmt"
import errors "errors"
import rpc "github.com/gavrilaf/amqp/rpc"
import proto "github.com/gogo/protobuf/proto"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Server API
type TestServiceServer interface {
	Ping(arg *Empty) (*ServerStatus, error)
	CreateUser(arg *User) (*ResourceID, error)
	CreateAccount(arg *Account) (*ResourceID, error)
	FindAccount(arg *ResourceID) (*Account, error)
}

// Run server API with this call
func RunServer(srv rpc.Server, handler TestServiceServer) {
	srv.Serve(func(funcID int32, arg []byte) ([]byte, error) {
		switch funcID {
		case Functions_Ping:
			return _Handle_Ping(handler, arg)
		case Functions_CreateUser:
			return _Handle_CreateUser(handler, arg)
		case Functions_CreateAccount:
			return _Handle_CreateAccount(handler, arg)
		case Functions_FindAccount:
			return _Handle_FindAccount(handler, arg)
		default:
			return nil, errors.New(fmt.Sprintf("unknown function with code: %d", funcID))
		}
	})
}

// Client API
type TestServiceClient interface {
	Close()
	Ping(arg *Empty) (*ServerStatus, error)
	CreateUser(arg *User) (*ResourceID, error)
	CreateAccount(arg *Account) (*ResourceID, error)
	FindAccount(arg *ResourceID) (*Account, error)
}

func NewTestServiceClient(cc rpc.Client) TestServiceClient {
	return &testServiceClient{cc}
}

type testServiceClient struct {
	cc rpc.Client
}

// Functions enum
const (
	Functions_Ping          int32 = 0
	Functions_CreateUser    int32 = 1
	Functions_CreateAccount int32 = 2
	Functions_FindAccount   int32 = 3
)

// Server API handlers
func _Handle_Ping(handler interface{}, arg []byte) ([]byte, error) {
	var req Empty
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(TestServiceServer).Ping(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_CreateUser(handler interface{}, arg []byte) ([]byte, error) {
	var req User
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(TestServiceServer).CreateUser(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_CreateAccount(handler interface{}, arg []byte) ([]byte, error) {
	var req Account
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(TestServiceServer).CreateAccount(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_FindAccount(handler interface{}, arg []byte) ([]byte, error) {
	var req ResourceID
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(TestServiceServer).FindAccount(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}

// Client API handlers
func (this *testServiceClient) Close() {
	this.cc.Close()
}
func (this *testServiceClient) Ping(arg *Empty) (*ServerStatus, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_Ping, Body: request})
	if err != nil {
		return nil, err
	}
	var resp ServerStatus
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *testServiceClient) CreateUser(arg *User) (*ResourceID, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_CreateUser, Body: request})
	if err != nil {
		return nil, err
	}
	var resp ResourceID
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *testServiceClient) CreateAccount(arg *Account) (*ResourceID, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_CreateAccount, Body: request})
	if err != nil {
		return nil, err
	}
	var resp ResourceID
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *testServiceClient) FindAccount(arg *ResourceID) (*Account, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_FindAccount, Body: request})
	if err != nil {
		return nil, err
	}
	var resp Account
	err = resp.Unmarshal(respData)
	return &resp, err
}
